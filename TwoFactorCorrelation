install.packages("ganalytics")
library(ganalytics)
library(stringr)

#establish connection to Google Analytics

my_creds <- GoogleApiCreds()

#test query
myQuery <- GaQuery(creds = my_creds )
GetGaData(myQuery)

#brand view ID
ga_id <- 186738676

#authorizes R to establish a connection with our GA account -- for googleanalyticsR package
ga_auth()

#; means "and" -- change these to &
#, means "or" -- changes these to |

#testing the syntax to build our own queries within R
all.segments <- as.data.frame(ga_segment_list())
HEVseg <- subset(all.segments,grepl("HEV",name))

HEVseg <- data.frame(HEVseg)

HEVseg$definition <- gsub("sessions::condition::", "", HEVseg$definition)

HEVsegments <- mutate_if(HEVseg, 
                     is.character, 
                     str_replace_all, pattern = "ga:", replacement = "~")

HEVsegments <- mutate_if(HEVsegments, 
                     is.character, 
                     str_replace_all, pattern = "=@", replacement = " %contains% '")

HEVsegments <- mutate_if(HEVsegments, 
                     is.character, 
                     str_replace_all, pattern = "=~", replacement = " %matches% '")

HEVsegments <- mutate_if(HEVsegments, 
                     is.character, 
                     str_replace_all, pattern = ";", replacement = "' AND ")

HEVsegments <- mutate_if(HEVsegments, 
                     is.character, 
                     str_replace_all, pattern = ",", replacement = "' OR ")

HEVsegments$definition <- strsplit(as.character(HEVsegments$definition), "sequence")

#only keep the first subset for each of our segments
HEVsegments <- lapply(HEVsegments$definition, function(x) x[1])

HEVsegments <- do.call(rbind.data.frame, HEVsegments)
names(HEVsegments)[1] <- "expression"

#remove leading and trailing whitespace
HEVsegments <- trimws(as.character(HEVsegments$expression))

#split the dataframe by our AND conditions
HEVsegments <- strsplit(as.character(HEVsegments), "AND")


#NEED SOME MORE SCRIPT HERE TO FURTHER CLEAN -- NEED TO MAKE SURE NONE OF OUR DEFINITIONS END WITH "OR" OR "AND"
#NEED TO MAKE SURE THAT ALL OF OUR CONDITIONS HAVE A CLOSING QUOTATION MARK

indexingcombos <- combinations(length(HEVseg$name),2)

#---------------------------------------------------------------------------------------------------------------------#
#-------------------------------THIS PART OF SCRIPT IS FOR TESTING PURPOSES ONLY--------------------------------------#
#---------------------------------------------------------------------------------------------------------------------#

#let's just grab some of our segments that we know will work and start working on a script to combine those ones
firstelement <- HEVsegments[2]
secondelement <- HEVsegments[98]
thirdelement <- HEVsegments[97]
fourthelement <- HEVsegments[92]

testHEVsegments <- list()

testHEVsegments <- append(testHEVsegments,firstelement)
testHEVsegments <- append(testHEVsegments,secondelement)
testHEVsegments <- append(testHEVsegments,thirdelement)
testHEVsegments <- append(testHEVsegments,fourthelement)
#---------------------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------#


#first build individual segment definitions in a loop based on their row
#the ith row of our list will be testHEVsegments[[i]]
segmentslisted <- list()
i=1
x=1
for (i in 1:length(testHEVsegments)){
  iters <- length(testHEVsegments[[i]])
#for each row in our HEV segment list, turn each element into an expression 
     for (x in 1:iters){
      element <- as.formula(testHEVsegments[[i]][x])
      assign(paste("element", x, sep = "_"), element)
#now combine elements to form our segments
      if (iters==1) {segment <- Expr(element_1)} 
      else if (iters==2) {segment <- Expr(element_1) & Expr(element_2)}
      else if (iters==3) {segment <- Expr(element_1) & Expr(element_2) & Expr(element_3)} 
      else {segment <- Expr(element_1) & Expr(element_2) & Expr(element_3) & Expr(element_4)}
      listobject <- segment
      segmentslisted <- list.append(segmentslisted,listobject)
      #assign(paste("segment", i, sep = "_"), segment)
      x=x+1    
           }
  i=i+1
}


#---------------------------------------------------------------------------------------------------------------------#
#--------------------------------NEED TO BUILD IN HIT EXCLUSION BUILDER HERE------------------------------------------#
#---------------------------------------------------------------------------------------------------------------------#

#now that our individual segments are built, start creating segment combinations based on our index combo list
#in this script, we will built segments that are a combo of only two segments

#create a list that contains the combinations of indexes for our test HEV segment list
testindexcombo <- data.frame(combinations(length(testHEVsegments),2))


#use a loop to dynamically create combinations of our segments
j=1
for(j in 1:nrow(testindexcombo)){
#get the values for which segment combination we will be combining
  firstsegindex <- testindexcombo[j,1]
  secondsegindex <- testindexcombo[j,2]

 combinedsegment <- segmentslisted[[firstsegindex]] & segmentslisted[[secondsegindex]]
 assign(paste("segment", firstsegindex, secondsegindex, sep = "_"), combinedsegment)
 j=j+1
}

